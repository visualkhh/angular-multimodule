/*
 * Generated by ASN.1 Java Compiler (http://www.asnlab.org/)
 * From ASN.1 module "MyHTTP"
 */
package ans.test.MyHTTP;

import java.util.Vector;
import org.asnlab.asndt.runtime.type.Buffer;
import org.asnlab.asndt.runtime.type.AsnType;
import org.asnlab.asndt.runtime.type.AsnModule;
import org.asnlab.asndt.runtime.conv.*;


public class MyHTTP extends AsnModule {

	public final static MyHTTP instance = new MyHTTP();


	/**
	/* Creates the ASN.1 module.
	/* The ASN.1 module instance is created automatically, clients must not call.
	/* A metadata file named MyHTTP.meta must exist in the same package of this class.
	 **/
	private MyHTTP() {
		super(MyHTTP.class); 
	}


	public static AsnType type(int id) {
		return instance.getType(id);
	}

	public static Object value(int valueId, AsnConverter converter) {
		return instance.getValue(valueId, converter);
	}

	public static Object object(int objectId, AsnConverter converter) {
		return instance.getObject(objectId, converter);
	}

	public static Vector objectSet(int objectSetId, AsnConverter converter) {
		return instance.getObjectSet(objectSetId, converter);
	}

	/**
	 * Sample test code
	 */
	public static void main(String[] args) {
		System.out.println("GetRequest");
		System.out.println("test of myRequest:");
		test(GetRequest.myRequest, GetRequest.TYPE, GetRequest.CONVERTER);

	}


	private static <V> void test(V value, AsnType type, AsnConverter converter) {
		System.out.println("======== print ========");
		type.print(value, converter, System.out);
		System.out.println();
		System.out.println();

		System.out.println("======== encode ========");
		Buffer buffer = Buffer.allocate(1024, EncodingRules.BASIC_ENCODING_RULES);
		type.encode(value, buffer, converter);
		byte[] bytes = buffer.array();
		for(byte b : bytes) {
			System.out.printf("%02X ", b & 0xFF);
		}
		System.out.println();
		System.out.println();

		System.out.println("======== decode ========");
		Buffer buffer2 = Buffer.wrap(bytes, EncodingRules.BASIC_ENCODING_RULES);
		V newValue = (V) type.decode(buffer2, converter);
		type.print(newValue, converter, System.out);
		System.out.println();
		System.out.println();

		System.out.println("======== equality ========");
		System.out.println(type.equals(value, newValue, converter));
	}

}
